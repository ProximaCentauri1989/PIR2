Если выбирать между макросом max и самописной шаблонной функцией max, то лучше использовать последнюю.
При написании любого подобного max макроса, с учетом того факта, что макрос это подстановка текста, необходимо учитывать все возможные 
варианты его применения, и изменять определение самого макроса в соответствие с этим. Это усложняет сам процесс его макроса. 
Как было упомянуто ранее, макрос просто посдтавляется в код, что заставляет учитывать следующее:
- приоритеты операторов (макрос это подстановка кода и нужно расставлять скобки при его определении)
- может произойти многократное вычисление аргументов
  Предположим, что определен макрос #define max(a,b) a < b ? b : a
  Предположим, что мы учли приоритеты операторов и расставили везде где нужно скобки.
  В случае, если при max(++i, 5) будет истинно ++i >= 5, то ++i вычислится два раза. Один раз в начале, второй раз когда условие окажется
  истинно.
- нужно учитывать возможные конфликты имен и влияние кода макроса на код функций, чье имя совпадает с именем макроса.
  В случае с max, макрос с таким именем, может конфликтовать с шаблоном max из стандартной библиотеки. Определенный в одном файле макрос
  с именем max вместе с подключенным заголовочным файлом #include <algorithm> "влезет" в определение шаблонной функции и изменит ее, 
  подставив себя.
Так же нужно учесть и другие факторы, ограничивающие область применения макроса:
- макрос не может быть рекурсивным.
- макрос не имеет адреса.
- макросы изменяют код еще до компиляции, поэтому код с макросами сложнее отлаживать.
