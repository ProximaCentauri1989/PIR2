//Test class
class A
{
public:
	A() { std::cout << "constructor" << std::endl; };
	~A() { std::cout << "destructor" << std::endl; };
};

//Main class
template<typename T>
class PtrVector {
public:
	PtrVector() {}
	~PtrVector() {};
	PtrVector(const PtrVector& other);
	PtrVector& operator=(const PtrVector& other);
	void Add(T* p);
	T* Get(size_t index);
	const T* Get(size_t index) const;
	void Clear();
private:
	std::vector<std::unique_ptr<T>> vec;
};

template<typename T>
inline PtrVector<T>::PtrVector(const PtrVector & other)
{
	for (auto &x : other.vec) {
		if (x.get()) {
			vec.push_back(std::move(std::unique_ptr<T>(new T(*x.get()))));
		}
	}
}

template<typename T>
inline PtrVector<T> & PtrVector<T>::operator=(const PtrVector<T> & other)
{
	PtrVector<T> tmp(other);
	vec.swap(tmp.vec);
	return *this;
}

template<typename T>
inline void PtrVector<T>::Add(T *p)
{
	vec.push_back(std::move(std::unique_ptr<T>(p)));
}

template<typename T>
inline T* PtrVector<T>::Get(size_t index)
{
	if (0 > index || index >= vec.size()) {
		throw std::out_of_range("Index is out of range");
	}

	return vec[index].get();
}

template<typename T>
inline const T* PtrVector<T>::Get(size_t index) const
{
	return vec[index].Get();
}

template<typename T>
inline void PtrVector<T>::Clear()
{
	vec.clear();
}

//Main.cpp
PtrVector<A> vec1;
vec1.Add(new A); constructor A
PtrVector<A> vec2;
vec2.Add(new A); constructor A
PtrVector<A> vec3(vec1);
vec2 = vec3; //destructor A

vec1.Clear(); //destructor A
vec2.Clear(); //destructor A
vec3.Clear(); //destructor A

Output:
constructor
constructor
destructor
destructor
destructor
destructor
